# 这个起始工作流适用于在多个平台上运行的 CMake 项目。如果您只需要单个平台，有不同的起始工作流。
# 参见：https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # 将 fail-fast 设置为 false 以确保为所有矩阵组合提供反馈。当您的工作流稳定时，请考虑将其更改为 true。
      fail-fast: false

      # 设置矩阵以运行以下 3 种配置：
      # 1. <Windows, Release, 默认运行器镜像上的最新 MSVC 编译器工具链，默认生成器>
      # 2. <Linux, Release, 默认运行器镜像上的最新 GCC 编译器工具链，默认生成器>
      # 3. <Linux, Release, 默认运行器镜像上的最新 Clang 编译器工具链，默认生成器>
      #
      # 要添加更多构建类型（Release、Debug、RelWithDebInfo 等），请自定义 build_type 列表。
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      # 设置 Python 3.12 环境，用于构建过程中的依赖
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache CMake dependencies
      # 缓存 CMake FetchContent 下载的依赖库，提高构建速度
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/build/_deps
          ${{ github.workspace }}/extern
          ~/.cache/cmake
        key: ${{ runner.os }}-cmake-deps-${{ matrix.c_compiler }}-${{ hashFiles('CMakeLists.txt', 'test/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-deps-${{ matrix.c_compiler }}-
          ${{ runner.os }}-cmake-deps-

    - name: Cache Python packages
      # 缓存 Python 包，加速 Python 依赖安装
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      # 安装 Python 依赖包（如果需要的话）
      run: |
        python -m pip install --upgrade pip
        # 如果有 requirements.txt 文件，取消下面一行的注释
        # pip install -r requirements.txt

    - name: Set reusable strings
      # 将重复的输入字符串（如构建输出目录）转换为步骤输出。这些步骤输出可以在整个工作流文件中使用。
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # 在 'build' 子目录中配置 CMake。只有在使用单配置生成器（如 make）时才需要 `CMAKE_BUILD_TYPE`。
      # 参见 https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # 使用给定配置构建您的程序。请注意，需要 --config 是因为默认的 Windows 生成器是多配置生成器（Visual Studio 生成器）。
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # 执行由 CMake 配置定义的测试。请注意，需要 --build-config 是因为默认的 Windows 生成器是多配置生成器（Visual Studio 生成器）。
      # 更多详细信息请参见 https://cmake.org/cmake/help/latest/manual/ctest.1.html
      run: ctest --build-config ${{ matrix.build_type }}

  # PyPI 发布作业 - 仅在构建成功且推送到 main 分支时运行
  pypi-publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # 添加OIDC权限，用于Trusted Publishing
    permissions:
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      # 设置 Python 3.12 环境用于打包
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache Python packages for publishing
      # 缓存 Python 包，加速发布作业中的依赖安装
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-publish-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-publish-
          ${{ runner.os }}-pip-
    
    - name: Install build dependencies
      # 安装构建和打包所需的依赖
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools cibuildwheel
    
    # 使用cibuildwheel构建预编译wheel包
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        CIBW_SKIP: pp* cp36-* cp37-*  # 跳过不支持的Python版本
        CIBW_BEFORE_BUILD: pip install cmake pybind11
        # 确保在构建wheel之前运行CMake构建过程
        CIBW_BEFORE_ALL_LINUX: >
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DUSE_LOCAL_PYTHON_ENV=ON &&
          cmake --build build --config Release
        CIBW_BEFORE_ALL_MACOS: >
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DUSE_LOCAL_PYTHON_ENV=ON &&
          cmake --build build --config Release
        CIBW_BEFORE_ALL_WINDOWS: >
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DUSE_LOCAL_PYTHON_ENV=ON &&
          cmake --build build --config Release
        # 确保构建的扩展模块被正确包含在wheel包中
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
          pip install auditwheel &&
          find build -name "twitter_dm*.so" -exec cp {} {dest_dir}/twitter_dm/ \; &&
          auditwheel repair -w {dest_dir} {wheel}
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
          pip install delocate &&
          find build -name "twitter_dm*.so" -name "twitter_dm*.dylib" -exec cp {} {dest_dir}/twitter_dm/ \; &&
          delocate-wheel -w {dest_dir} {wheel}
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
          pip install delvewheel &&
          for /r build %%i in (twitter_dm*.pyd twitter_dm*.dll) do copy %%i {dest_dir}\twitter_dm\ &&
          delvewheel repair -w {dest_dir} {wheel}
    
    # 构建源码分发包
    - name: Build sdist
      run: |
        python -m build --sdist
    
    # 测试安装
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import twitter_dm; print(twitter_dm.get_version())"
    
    - name: Publish to PyPI
      # 发布到 PyPI，使用Trusted Publishing
      uses: pypa/gh-action-pypi-publish@v1.12.4
      with:
        # 分发文件的目录（默认为 dist）
        packages-dir: dist
        # 上传前验证元数据
        verify-metadata: true
        # 如果包已存在则跳过（避免重复上传失败）
        skip-existing: false
        # 显示详细输出
        verbose: true
        # 显示文件哈希值
        print-hash: true
