# 这个起始工作流适用于在多个平台上运行的 CMake 项目。如果您只需要单个平台，有不同的起始工作流。
# 参见：https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # 将 fail-fast 设置为 false 以确保为所有矩阵组合提供反馈。当您的工作流稳定时，请考虑将其更改为 true。
      fail-fast: false

      # 设置矩阵以运行以下配置：
      # 1. <Linux, Release, 默认运行器镜像上的最新 GCC 编译器工具链，默认生成器>
      # 2. <Linux, Release, 默认运行器镜像上的最新 Clang 编译器工具链，默认生成器>
      # 3. <macOS, Release, 默认运行器镜像上的最新 Clang 编译器工具链，默认生成器>
      #
      # 要添加更多构建类型（Release、Debug、RelWithDebInfo 等），请自定义 build_type 列表。
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            target_arch: x86_64
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            target_arch: arm64
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      # 设置 Python 3.12 环境，用于构建过程中的依赖
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache CMake dependencies
      # 缓存 CMake FetchContent 下载的依赖库，提高构建速度
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/build/_deps
          ${{ github.workspace }}/extern
          ~/.cache/cmake
        key: ${{ runner.os }}-cmake-deps-${{ matrix.c_compiler }}-${{ hashFiles('CMakeLists.txt', 'test/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-deps-${{ matrix.c_compiler }}-
          ${{ runner.os }}-cmake-deps-

    - name: Cache Python packages
      # 缓存 Python 包，加速 Python 依赖安装
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      # 安装 Python 依赖包（如果需要的话）
      run: |
        python -m pip install --upgrade pip
        # 如果有 requirements.txt 文件，取消下面一行的注释
        # pip install -r requirements.txt

    - name: Set reusable strings
      # 将重复的输入字符串（如构建输出目录）转换为步骤输出。这些步骤输出可以在整个工作流文件中使用。
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # 在 'build' 子目录中配置 CMake
      # 参见 https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        TARGET_ARCH: ${{ matrix.target_arch }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # 使用给定配置构建您的程序
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # 执行由 CMake 配置定义的测试
      # 更多详细信息请参见 https://cmake.org/cmake/help/latest/manual/ctest.1.html
      run: ctest --build-config ${{ matrix.build_type }}
      
    # 上传构建结果作为工件，供后续pypi-publish作业使用
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.c_compiler }}${{ matrix.target_arch && format('-{0}', matrix.target_arch) || '' }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}
        if-no-files-found: warn

  # PyPI 发布作业 - 仅在构建成功且推送到 main 分支时运行
  pypi-publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # 添加OIDC权限，用于Trusted Publishing
    permissions:
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      # 设置 Python 3.12 环境用于打包
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    # 下载所有构建工件
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true
        
    # 创建build目录并复制构建工件
    - name: Prepare build artifacts
      run: |
        mkdir -p build
        find artifacts -type f -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.pyd" | xargs -I{} cp {} build/
        echo "构建工件列表:"
        find build -type f | sort
    
    - name: Cache Python packages for publishing
      # 缓存 Python 包，加速发布作业中的依赖安装
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-publish-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-publish-
          ${{ runner.os }}-pip-
    
    - name: Install build dependencies
      # 安装构建和打包所需的依赖
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools cibuildwheel
    
    # 安装依赖包
    - name: Install dependencies
      run: |
        python -m pip install tomli tomli_w
    
    # 不使用cibuildwheel，直接使用pip wheel构建wheel包
    - name: Build wheels
      run: |
        # 复制构建工件到根目录
        echo "复制构建工件到根目录..."
        # 复制所有.so、.dylib、.dll和.pyd文件
        find artifacts -type f \( -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.pyd" \) | xargs -I{} cp {} ./
        
        # 特别处理libcpr.so.1符号链接
        if [ -f "artifacts/libcpr.so" ]; then
          cp artifacts/libcpr.so ./
          ln -sf libcpr.so libcpr.so.1
        fi
        
        # 复制所有libcpr*、libcurl*和libz*文件，但排除CMakeFiles和docs目录
        find artifacts -type f \( -name "libcpr*" -o -name "libcurl*" -o -name "libz*" \) -not -path "*/CMakeFiles/*" -not -path "*/docs/*" | xargs -I{} cp {} ./ 2>/dev/null || true
        
        # 列出根目录中的文件
        echo "根目录中的文件:"
        ls -la *.so *.dylib *.dll *.pyd libcpr* libcurl* libz* 2>/dev/null || echo "没有找到扩展模块文件"
        
        # 使用build构建wheel包
        python -m build --wheel
        
        # 修复Linux wheel包的平台标签
        if ls dist/*linux_x86_64.whl 1> /dev/null 2>&1; then
          echo "修复Linux wheel包的平台标签..."
          pip install wheel auditwheel || pip install wheel
          
          # 创建临时目录
          mkdir -p temp_wheel_fix
          
          for wheel_file in dist/*linux_x86_64.whl; do
            echo "处理wheel文件: $wheel_file"
            
            # 解压wheel文件
            wheel unpack "$wheel_file" -d temp_wheel_fix/
            
            # 获取解压后的目录名
            unpacked_dir=$(find temp_wheel_fix -maxdepth 1 -type d -name "*" | grep -v "^temp_wheel_fix$" | head -1)
            
            if [ -n "$unpacked_dir" ]; then
              # 修改WHEEL文件中的平台标签
              wheel_metadata="$unpacked_dir"/*.dist-info/WHEEL
              if [ -f "$wheel_metadata" ]; then
                sed -i 's/Tag: cp[0-9]*-cp[0-9]*-linux_x86_64/Tag: cp312-cp312-manylinux1_x86_64/' "$wheel_metadata"
                echo "已修改WHEEL元数据文件: $wheel_metadata"
              fi
              
              # 删除原始wheel文件
              rm "$wheel_file"
              
              # 重新打包wheel，使用正确的文件名
              wheel pack "$unpacked_dir" -d dist/
              
              # 重命名生成的wheel文件
              original_name=$(basename "$wheel_file")
              new_name=$(echo "$original_name" | sed 's/linux_x86_64/manylinux1_x86_64/')
              if [ -f "dist/$original_name" ]; then
                mv "dist/$original_name" "dist/$new_name"
              fi
              echo "重新打包完成: dist/$new_name"
            fi
          done
          
          # 清理临时目录
          rm -rf temp_wheel_fix
        fi
        
        # 列出生成的wheel包
        echo "生成的wheel包:"
        ls -la dist/
        
        # 检查wheel包内容
        echo "检查wheel包内容:"
        pip install wheel
        # 检查是否有wheel文件存在
        if ls dist/*.whl 1> /dev/null 2>&1; then
          for whl_file in dist/*.whl; do
            echo "解压wheel文件: $whl_file"
            wheel unpack "$whl_file"
          done
          echo "wheel包内容:"
          find twitter_dm_static* -type f | sort 2>/dev/null || echo "未找到解压的wheel内容"
        else
          echo "错误: 未找到任何wheel文件"
          ls -la dist/
        fi
    
    # 构建源码分发包
    - name: Build sdist
      run: |
        python -m build --sdist
    
    # 测试安装
    - name: Test package installation
      run: |
        # 安装wheel包
        pip install dist/*.whl
        
        # 列出安装的包内容
        echo "安装的包内容:"
        pip show -f twitter-dm-static
        
        # 测试导入和基本功能
        python -c "import twitter_dm; print('版本:', twitter_dm.__version__ if hasattr(twitter_dm, '__version__') else 'unknown')"
    
    - name: Publish to PyPI
      # 发布到 PyPI，使用Trusted Publishing
      uses: pypa/gh-action-pypi-publish@v1.12.4
      with:
        # 分发文件的目录（默认为 dist）
        packages-dir: dist
        # 上传前验证元数据
        verify-metadata: true
        # 如果包已存在则跳过（避免重复上传失败）
        skip-existing: true
        # 显示详细输出
        verbose: true
        # 显示文件哈希值
        print-hash: true
